#!/bin/bash

ZEROGPA_VERSION="v5.4"
STATUS_OK=true
MENSAGEM=""
DATA=$(date "+%Y-%m-%d %H:%M:%S")
KERNEL_ATUAL=$(uname -r)
APROVADOS_FILE="$HOME/.zerogpa-kernels-aprovados"
ADIAMENTO_FILE="$HOME/.zerogpa-adiamento"

[ ! -f "$APROVADOS_FILE" ] && touch "$APROVADOS_FILE"

# === Checagens principais ===

if systemctl is-enabled nvidia-powerd &>/dev/null; then
  MENSAGEM+="‚ùå nvidia-powerd ATIVO\n"
  STATUS_OK=false
else
  MENSAGEM+="‚úÖ nvidia-powerd desativado\n"
fi

if lsmod | grep -q i2c_nvidia_gpu; then
  MENSAGEM+="‚ùå M√≥dulo i2c_nvidia_gpu CARREGADO\n"
  STATUS_OK=false
else
  MENSAGEM+="‚úÖ M√≥dulo i2c_nvidia_gpu ausente\n"
fi

if swapon --show | grep -q zram; then
  MENSAGEM+="‚úÖ ZRAM ativo\n"
else
  MENSAGEM+="‚ùå ZRAM INATIVO\n"
  STATUS_OK=false
fi

if nvidia-smi &>/dev/null; then
  MENSAGEM+="‚úÖ Driver NVIDIA OK (nvidia-smi)\n"
else
  MENSAGEM+="‚ùå NVIDIA falhando (nvidia-smi n√£o responde)\n"
  STATUS_OK=false
fi

if [[ "$XDG_SESSION_TYPE" == "wayland" ]]; then
  MENSAGEM+="‚úÖ Wayland em uso\n"
else
  MENSAGEM+="‚ùå X11 em uso (esperado: Wayland)\n"
  STATUS_OK=false
fi

if systemctl --user is-active pipewire &>/dev/null; then
  MENSAGEM+="‚úÖ PipeWire rodando\n"
else
  MENSAGEM+="‚ùå PipeWire inativo\n"
  STATUS_OK=false
fi

USO_DISCO=$(df / | awk 'NR==2 {print $5}' | tr -d '%')
if [[ "$USO_DISCO" -lt 90 ]]; then
  MENSAGEM+="‚úÖ Uso de disco OK (${USO_DISCO}%)\n"
else
  MENSAGEM+="‚ùå Uso de disco ALTO (${USO_DISCO}%)\n"
  STATUS_OK=false
fi

# === Verifica√ß√£o de Kernel ===

KERNEL_APROVADO=false
if grep -q "$KERNEL_ATUAL" "$APROVADOS_FILE"; then
  MENSAGEM+="‚úÖ Kernel aprovado ($KERNEL_ATUAL)\n"
  KERNEL_APROVADO=true
else
  MENSAGEM+="‚ö†Ô∏è Kernel n√£o aprovado ($KERNEL_ATUAL)\n"
  SUGESTAO_KERNEL=true
fi

# === Tempo de Boot ===

BOOT_TEMPO=$(systemd-analyze | grep 'Startup finished' || true)
if [ -n "$BOOT_TEMPO" ]; then
  MENSAGEM+="‚ÑπÔ∏è Tempo de boot: $BOOT_TEMPO\n"
fi

# === Adiamento ativo? ===

ADIAR_KERNEL=false
if [ -f "$ADIAMENTO_FILE" ]; then
  ULTIMO=$(cat "$ADIAMENTO_FILE")
  HOJE=$(date +%s)
  if [ "$ULTIMO" -gt "$HOJE" ]; then
    ADIAR_KERNEL=true
  fi
fi

# === Logs recentes ===

ERROS=$(journalctl -p 3 -xb | grep -vE "gnome-keyring|vboxclient|ucsi_ccg" | head -n 5)
if [ -n "$ERROS" ]; then
  MENSAGEM+="‚ö†Ô∏è Erros recentes detectados no journalctl:\n$ERROS\n"
else
  MENSAGEM+="‚úÖ Nenhum erro cr√≠tico recente detectado\n"
fi


# === Benchmark leve ===
start_time=$(date +%s.%N)
for i in {1..50000}; do :; done
end_time=$(date +%s.%N)
elapsed=$(echo "$end_time - $start_time" | bc)
rounded=$(printf "%.2f" "$elapsed")

if (( $(echo "$rounded < 0.5" | bc -l) )); then
  FLUIDEZ="üü¢ Excelente"
elif (( $(echo "$rounded < 1.5" | bc -l) )); then
  FLUIDEZ="üü° Moderada"
else
  FLUIDEZ="üî¥ Lenta"
fi

MENSAGEM+="üß™ Benchmark leve: ${rounded}s para resposta do sistema\n"
MENSAGEM+="üéØ N√≠vel de fluidez: $FLUIDEZ\n"

# === Resultado final ===
# === Resultado final ===

if [ "$STATUS_OK" = true ]; then
  echo -e "
‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó  ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó  ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó  ‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó 
‚ïö‚ïê‚ïê‚ñà‚ñà‚ñà‚ïî‚ïù‚ñà‚ñà‚ïî‚ïê‚ïê‚ïê‚ïê‚ïù‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïó‚ñà‚ñà‚ïî‚ïê‚ïê‚ïê‚ñà‚ñà‚ïó‚ñà‚ñà‚ïî‚ïê‚ïê‚ïê‚ïê‚ïù ‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïó‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïó
  ‚ñà‚ñà‚ñà‚ïî‚ïù ‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó  ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë  ‚ñà‚ñà‚ñà‚ïó‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïë
 ‚ñà‚ñà‚ñà‚ïî‚ïù  ‚ñà‚ñà‚ïî‚ïê‚ïê‚ïù  ‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïó‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïî‚ïê‚ïê‚ïê‚ïù ‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïë
‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñà‚ñà‚ïë  ‚ñà‚ñà‚ïë‚ïö‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù‚ïö‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù‚ñà‚ñà‚ïë     ‚ñà‚ñà‚ïë  ‚ñà‚ñà‚ïë
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù‚ïö‚ïê‚ïù  ‚ïö‚ïê‚ïù ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù  ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù ‚ïö‚ïê‚ïù     ‚ïö‚ïê‚ïù  ‚ïö‚ïê‚ïù

 üß† Sistema Est√°vel | üõ∞Ô∏è ZEROGPA $ZEROGPA_VERSION | $DATA

$MENSAGEM
üéØ Estado atual: Baixa entropia. Alta fluidez.
"

  if [ "$SUGESTAO_KERNEL" = true ] && [ "$ADIAR_KERNEL" = false ]; then
    echo -e "üß† Tudo parece est√°vel. Kernel ainda n√£o aprovado."
    read -p "‚úÖ Deseja aprovar este kernel agora? (s/N): " RESP_APROV
    if [[ "$RESP_APROV" =~ ^[sS]$ ]]; then
      echo "$KERNEL_ATUAL" >> "$APROVADOS_FILE"
      echo "‚úÖ Kernel $KERNEL_ATUAL aprovado com sucesso."
    fi
    sleep 2
    clear
  else
    sleep 10
    clear
  fi
else
  echo -e "‚ö†Ô∏è  [$DATA] O sistema ainda n√£o est√° em pleno equil√≠brio:
"
  echo -e "$MENSAGEM"
  sleep 10
  clear
fi
